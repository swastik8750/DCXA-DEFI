{"ast":null,"code":"var _jsxFileName = \"G:\\\\MyProfile\\\\FUTURE_TRACK\\\\autonity-uniswap-interface\\\\src\\\\CoinSwapper\\\\CoinDialog.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button, Dialog, Grid, IconButton, makeStyles, TextField, Typography, withStyles } from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2)\n  },\n  titleSection: {\n    padding: theme.spacing(2)\n  },\n  titleText: {\n    alignSelf: \"center\"\n  },\n  hr: {\n    margin: 0\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2)\n  },\n  coinList: {\n    height: \"300px\",\n    overflowY: \"scroll\"\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(0.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\"\n  }\n});\n\nconst useStyles = makeStyles(styles); // This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\n\nconst DialogTitle = withStyles(styles)(props => {\n  const {\n    children,\n    classes,\n    onClose,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(MuiDialogTitle, {\n    disableTypography: true,\n    className: classes.titleSection,\n    ...other,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justifyContent: \"space-between\",\n      alignContent: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        className: classes.titleText,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), onClose ? /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"close\",\n        onClick: onClose,\n        children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}); // This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\n\nconst DialogActions = withStyles(theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: COLORS.grey[100]\n  }\n}))(MuiDialogActions);\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired\n};\nexport default function CoinDialog(props) {\n  _s();\n\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\n  // addresses will first be validated to make sure they exist.\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\n  const classes = useStyles();\n  const {\n    onClose,\n    open,\n    coins,\n    signer,\n    ...others\n  } = props;\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\"); // Called when the user tries to input a custom address, this function will validate the address and will either\n  // then close the dialog and return the validated address, or will display an error.\n\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  }; // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\n\n\n  const exit = value => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    onClose: () => exit(undefined),\n    fullWidth: true,\n    maxWidth: \"sm\",\n    classes: {\n      paper: classes.dialogContainer\n    },\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      onClose: () => exit(undefined),\n      children: \"Select Coin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: classes.hr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.coinContainer,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        spacing: 1,\n        alignContent: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          value: address,\n          onChange: e => setAddress(e.target.value),\n          variant: \"outlined\",\n          placeholder: \"Paste Address\",\n          error: error !== \"\",\n          helperText: error,\n          fullWidth: true,\n          className: classes.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: classes.hr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          className: classes.coinList,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            children: coins.map((coin, index) => /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(CoinButton, {\n                coinName: coin.name,\n                coinAbbr: coin.abbr,\n                onClick: () => exit(coin.address)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: classes.hr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        autoFocus: true,\n        onClick: submit,\n        color: \"primary\",\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CoinDialog, \"WcCDkXJvyWJJjwZ6N6jvAflR1fE=\", false, function () {\n  return [useStyles];\n});\n\n_c = CoinDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinDialog\");","map":{"version":3,"sources":["G:/MyProfile/FUTURE_TRACK/autonity-uniswap-interface/src/CoinSwapper/CoinDialog.js"],"names":["React","Button","Dialog","Grid","IconButton","makeStyles","TextField","Typography","withStyles","MuiDialogTitle","MuiDialogActions","CloseIcon","CoinButton","doesTokenExist","PropTypes","COLORS","styles","theme","dialogContainer","borderRadius","spacing","titleSection","padding","titleText","alignSelf","hr","margin","address","paddingLeft","paddingRight","paddingBottom","coinList","height","overflowY","coinContainer","paddingTop","marginTop","overflow","useStyles","DialogTitle","props","children","classes","onClose","other","DialogActions","root","backgroundColor","grey","CoinDialog","propTypes","func","isRequired","open","bool","coins","array","signer","others","setAddress","useState","error","setError","submit","exit","value","undefined","paper","e","target","map","coin","index","name","abbr"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport CoinButton from \"./CoinButton\";\r\nimport { doesTokenExist } from \"../ethereumFunctions\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as COLORS from \"@material-ui/core/colors\";\r\n\r\nconst styles = (theme) => ({\r\n  dialogContainer: {\r\n    borderRadius: theme.spacing(2),\r\n  },\r\n  titleSection: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  titleText: {\r\n    alignSelf: \"center\",\r\n  },\r\n  hr: {\r\n    margin: 0,\r\n  },\r\n  address: {\r\n    paddingLeft: theme.spacing(2.5),\r\n    paddingRight: theme.spacing(2.5),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  coinList: {\r\n    height: \"300px\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  coinContainer: {\r\n    paddingLeft: theme.spacing(0.5),\r\n    paddingRight: theme.spacing(0.5),\r\n    paddingTop: theme.spacing(2),\r\n    marginTop: theme.spacing(2),\r\n    overflow: \"hidden\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\n// This is a modified version of MaterialUI's DialogTitle component, I've added a close button in the top right corner\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle\r\n      disableTypography\r\n      className={classes.titleSection}\r\n      {...other}\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignContent=\"center\"\r\n      >\r\n        <Typography variant=\"h6\" className={classes.titleText}>\r\n          {children}\r\n        </Typography>\r\n        {onClose ? (\r\n          <IconButton aria-label=\"close\" onClick={onClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </Grid>\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\n// This is a modified version of MaterialUI's DialogActions component, the color has been changed by modifying the CSS\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n    backgroundColor: COLORS.grey[100],\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nCoinDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  coins: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function CoinDialog(props) {\r\n  // The CoinDialog component will display a dialog window on top of the page, allowing a user to select a coin\r\n  // from a list (list can be found in 'src/constants/coins.js') or enter an address into a search field. Any entered\r\n  // addresses will first be validated to make sure they exist.\r\n  // When the dialog closes, it will call the `onClose` prop with 1 argument which will either be undefined (if the\r\n  // user closes the dialog without selecting anything), or will be a string containing the address of a coin.\r\n\r\n  const classes = useStyles();\r\n  const { onClose, open, coins, signer, ...others } = props;\r\n\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [error, setError] = React.useState(\"\");\r\n\r\n  // Called when the user tries to input a custom address, this function will validate the address and will either\r\n  // then close the dialog and return the validated address, or will display an error.\r\n  const submit = () => {\r\n    if (doesTokenExist(address, signer)) {\r\n      exit(address);\r\n    } else {\r\n      setError(\"This address is not valid\");\r\n    }\r\n  };\r\n\r\n  // Resets any fields in the dialog (in case it's opened in the future) and calls the `onClose` prop\r\n  const exit = (value) => {\r\n    setError(\"\");\r\n    setAddress(\"\");\r\n    onClose(value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={() => exit(undefined)}\r\n      fullWidth\r\n      maxWidth=\"sm\"\r\n      classes={{ paper: classes.dialogContainer }}\r\n    >\r\n      <DialogTitle onClose={() => exit(undefined)}>Select Coin</DialogTitle>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <div className={classes.coinContainer}>\r\n        <Grid container direction=\"column\" spacing={1} alignContent=\"center\">\r\n          <TextField\r\n            value={address}\r\n            onChange={(e) => setAddress(e.target.value)}\r\n            variant=\"outlined\"\r\n            placeholder=\"Paste Address\"\r\n            error={error !== \"\"}\r\n            helperText={error}\r\n            fullWidth\r\n            className={classes.address}\r\n          />\r\n\r\n          <hr className={classes.hr} />\r\n\r\n          <Grid item className={classes.coinList}>\r\n            <Grid container direction=\"column\">\r\n              {/* Maps all of the tokens in the constants file to buttons */}\r\n              {coins.map((coin, index) => (\r\n                <Grid item key={index} xs={12}>\r\n                  <CoinButton\r\n                    coinName={coin.name}\r\n                    coinAbbr={coin.abbr}\r\n                    onClick={() => exit(coin.address)}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <hr className={classes.hr} />\r\n\r\n      <DialogActions>\r\n        <Button autoFocus onClick={submit} color=\"primary\">\r\n          Enter\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}