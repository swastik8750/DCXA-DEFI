{"ast":null,"code":"var _jsxFileName = \"G:\\\\MyProfile\\\\FUTURE_TRACK\\\\autonity-uniswap-interface\\\\src\\\\CoinSwapper\\\\CoinSwapper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Container, Grid, IconButton, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport { getAccount, getFactory, getProvider, getRouter, getSigner, getNetwork, getAmountOut, getBalanceAndSymbol, getWeth, swapTokens, getReserves } from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3)\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5)\n  },\n  fullWidth: {\n    width: \"100%\"\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1)\n  },\n  hr: {\n    width: \"100%\"\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\"\n  },\n  footer: {\n    marginTop: \"285px\"\n  }\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    enqueueSnackbar\n  } = useSnackbar(); // Stores information for the Autonity Network\n\n  const [provider, setProvider] = React.useState(getProvider());\n  const [signer, setSigner] = React.useState(getSigner(provider)); // The following are populated in a react hook\n\n  const [account, setAccount] = React.useState(undefined);\n  const [chainId, setChainId] = React.useState(undefined);\n  const [router, setRouter] = React.useState(undefined);\n  const [weth, setWeth] = React.useState(undefined);\n  const [factory, setFactory] = React.useState(undefined); // Stores a record of whether their respective dialog window is open\n\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false); // Stores data about their respective coin\n\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined\n  });\n  const [coins, setCoins] = React.useState([]); // Stores the current reserves in the liquidity pool between coin1 and coin2\n\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]); // Stores the current value of their respective text box\n\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\"); // Controls the loading button\n\n  const [loading, setLoading] = React.useState(false); // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  }; // These functions take an HTML event, pull the data out and puts it into a state variable.\n\n\n  const handleChange = {\n    field1: e => {\n      setField1Value(e.target.value);\n    }\n  }; // Turns the account's balance into something nice and readable\n\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol) return parseFloat(balance).toPrecision(8) + \" \" + symbol;else return \"0.0\";\n  }; // Turns the coin's reserves into something nice and readable\n\n\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;else return \"0.0\";\n  }; // Determines whether the button should be enabled or not\n\n\n  const isButtonEnabled = () => {\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput = parseFloat(field1Value);\n    return coin1.address && coin2.address && !isNaN(parsedInput) && 0 < parsedInput && parsedInput <= coin1.balance;\n  }; // Called when the dialog window for coin1 exits\n\n\n  const onToken1Selected = address => {\n    // Close the dialog window\n    setDialog1Open(false); // If the user inputs the same token, we want to switch the data in the fields\n\n    if (address === coin2.address) {\n      switchFields();\n    } // We only update the values if the user provides a token\n    else if (address) {\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then(data => {\n          setCoin1({\n            address: address,\n            symbol: data.symbol,\n            balance: data.balance\n          });\n        });\n      }\n  }; // Called when the dialog window for coin2 exits\n\n\n  const onToken2Selected = address => {\n    // Close the dialog window\n    setDialog2Open(false); // If the user inputs the same token, we want to switch the data in the fields\n\n    if (address === coin1.address) {\n      switchFields();\n    } // We only update the values if the user provides a token\n    else if (address) {\n        // Getting some token data is async, so we need to wait for the data to return, hence the promise\n        getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then(data => {\n          setCoin2({\n            address: address,\n            symbol: data.symbol,\n            balance: data.balance\n          });\n        });\n      }\n  }; // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n\n\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n    swapTokens(coin1.address, coin2.address, field1Value, router, account, signer).then(() => {\n      setLoading(false); // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n\n      setField1Value(\"\");\n      enqueueSnackbar(\"Transaction Successful\", {\n        variant: \"success\"\n      });\n    }).catch(e => {\n      setLoading(false);\n      enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n        variant: \"error\",\n        autoHideDuration: 10000\n      });\n    });\n  }; // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n\n\n  useEffect(() => {\n    console.log(\"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address);\n\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(data => setReserves(data));\n    }\n  }, [coin1.address, coin2.address, account, factory, router, signer]); // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, router, signer).then(console.log(amount) // (amount) => setField2Value((amount).toFixed(7))\n      );\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]); // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && account) {\n        getReserves(coin1.address, coin2.address, factory, signer, account).then(data => setReserves(data));\n      }\n\n      if (coin1.address && account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(data => {\n          setCoin1({ ...coin1,\n            balance: data.balance\n          });\n        });\n      }\n\n      if (coin2.address && account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(data => {\n          setCoin2({ ...coin2,\n            balance: data.balance\n          });\n        });\n      }\n    }, 10000);\n    return () => clearTimeout(coinTimeout);\n  }); // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\n\n  useEffect(() => {\n    getAccount().then(account => {\n      setAccount(account);\n    });\n\n    async function Network() {\n      const chainId = await getNetwork(provider).then(chainId => {\n        setChainId(chainId);\n        return chainId;\n      });\n\n      if (chains.networks.includes(chainId)) {\n        setwrongNetworkOpen(false);\n        console.log('chainID: ', chainId); // Get the router using the chainID\n\n        const router = await getRouter(chains.routerAddress.get(chainId), signer);\n        setRouter(router); // Get Weth address from router\n\n        await router.WETH().then(wethAddress => {\n          setWeth(getWeth(wethAddress, signer)); // Set the value of the weth address in the default coins array\n\n          const coins = COINS.get(chainId);\n          coins[0].address = wethAddress;\n          setCoins(coins);\n        }); // Get the factory address from the router\n\n        await router.factory().then(factory_address => {\n          setFactory(getFactory(factory_address, signer));\n        });\n      } else {\n        console.log('Wrong network mate.');\n        setwrongNetworkOpen(true);\n      }\n    }\n\n    Network();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CoinDialog, {\n      open: dialog1Open,\n      onClose: onToken1Selected,\n      coins: coins,\n      signer: signer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CoinDialog, {\n      open: dialog2Open,\n      onClose: onToken2Selected,\n      coins: coins,\n      signer: signer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WrongNetwork, {\n      open: wrongNetworkOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paperContainer,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          className: classes.title,\n          children: \"Swap Coins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          alignItems: \"center\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: classes.fullWidth,\n            children: /*#__PURE__*/_jsxDEV(CoinField, {\n              activeField: true,\n              value: field1Value,\n              onClick: () => setDialog1Open(true),\n              onChange: handleChange.field1,\n              symbol: coin1.symbol !== undefined ? coin1.symbol : \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: switchFields,\n            className: classes.switchButton,\n            children: /*#__PURE__*/_jsxDEV(SwapVerticalCircleIcon, {\n              fontSize: \"medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: classes.fullWidth,\n            children: /*#__PURE__*/_jsxDEV(CoinField, {\n              activeField: false,\n              value: field2Value,\n              onClick: () => setDialog2Open(true),\n              symbol: coin2.symbol !== undefined ? coin2.symbol : \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Your Balances\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatBalance(coin1.balance, coin1.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatBalance(coin2.balance, coin2.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Reserves\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatReserve(reserves[0], coin1.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatReserve(reserves[1], coin2.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n            loading: loading,\n            valid: isButtonEnabled(),\n            success: false,\n            fail: false,\n            onClick: swap,\n            children: [/*#__PURE__*/_jsxDEV(LoopIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this), \"Swap\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.footer,\n      direction: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://faucet.bakerloo.autonity.network/\",\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CoinSwapper, \"ZQx4BYfP0D5N2y1E/BOfyQ2LkLI=\", false, function () {\n  return [useStyles, useSnackbar];\n});\n\n_c = CoinSwapper;\nexport default CoinSwapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinSwapper\");","map":{"version":3,"sources":["G:/MyProfile/FUTURE_TRACK/autonity-uniswap-interface/src/CoinSwapper/CoinSwapper.js"],"names":["React","useEffect","Container","Grid","IconButton","makeStyles","Paper","Typography","SwapVerticalCircleIcon","useSnackbar","LoopIcon","getAccount","getFactory","getProvider","getRouter","getSigner","getNetwork","getAmountOut","getBalanceAndSymbol","getWeth","swapTokens","getReserves","CoinField","CoinDialog","LoadingButton","WrongNetwork","COINS","chains","styles","theme","paperContainer","borderRadius","spacing","padding","paddingBottom","switchButton","zIndex","margin","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","footer","marginTop","useStyles","CoinSwapper","props","classes","enqueueSnackbar","provider","setProvider","useState","signer","setSigner","account","setAccount","undefined","chainId","setChainId","router","setRouter","weth","setWeth","factory","setFactory","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","coin1","setCoin1","address","symbol","coin2","setCoin2","coins","setCoins","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","loading","setLoading","switchFields","reverse","handleChange","field1","e","target","value","formatBalance","parseFloat","toPrecision","formatReserve","reserve","isButtonEnabled","parsedInput","isNaN","onToken1Selected","then","data","onToken2Selected","swap","console","log","variant","catch","message","autoHideDuration","amount","coinTimeout","setTimeout","clearTimeout","Network","networks","includes","routerAddress","get","WETH","wethAddress","factory_address"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getNetwork,\r\n  getAmountOut,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  swapTokens,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"./CoinField\";\r\nimport CoinDialog from \"./CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport COINS from \"../constants/coins\";\r\nimport * as chains from \"../constants/chains\";\r\n\r\nconst styles = (theme) => ({\r\n  paperContainer: {\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n  },\r\n  switchButton: {\r\n    zIndex: 1,\r\n    margin: \"-16px\",\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  footer: {\r\n    marginTop: \"285px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction CoinSwapper(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores information for the Autonity Network\r\n\r\n  const [provider, setProvider] = React.useState(getProvider());\r\n  const [signer, setSigner] = React.useState(getSigner(provider));\r\n\r\n  // The following are populated in a react hook\r\n  const [account, setAccount] = React.useState(undefined);\r\n  const [chainId, setChainId] = React.useState(undefined);\r\n  const [router, setRouter] = React.useState(undefined);\r\n  const [weth, setWeth] = React.useState(undefined);\r\n  const [factory, setFactory] = React.useState(undefined);\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  const [coins, setCoins] = React.useState([]);\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(field2Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n    const parsedInput = parseFloat(field1Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      !isNaN(parsedInput) &&\r\n      0 < parsedInput &&\r\n      parsedInput <= coin1.balance\r\n    );\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(account, address, provider, signer, weth.address, coins).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\r\n  const swap = () => {\r\n    console.log(\"Attempting to swap tokens...\");\r\n    setLoading(true);\r\n\r\n    swapTokens(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      router,\r\n      account,\r\n      signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n  // of the two coins change.\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address) {\r\n      getReserves(coin1.address, coin2.address, factory, signer, account).then(\r\n        (data) => setReserves(data)\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, account, factory, router, signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n  // It attempts to calculate and set the state variable `field2Value`\r\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n  // the value in the output box will change.\r\n  useEffect(() => {\r\n    if (isNaN(parseFloat(field1Value))) {\r\n      setField2Value(\"\");\r\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\r\n      getAmountOut(coin1.address, coin2.address, field1Value, router, signer).then(\r\n        console.log(amount)\r\n        // (amount) => setField2Value((amount).toFixed(7))\r\n        \r\n      );\r\n    } else {\r\n      setField2Value(\"\");\r\n    }\r\n  }, [field1Value, coin1.address, coin2.address]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log(\"Checking balances...\");\r\n\r\n      if (coin1.address && coin2.address && account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          factory,\r\n          signer,\r\n          account\r\n        ).then((data) => setReserves(data));\r\n      }\r\n\r\n      if (coin1.address && account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(account, coin1.address, provider, signer, weth.address, coins).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(account, coin2.address, provider, signer, weth.address, coins).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  // This hook will run when the component first mounts, it can be useful to put logic to populate variables here\r\n  useEffect(() => {\r\n    \r\n    getAccount().then((account) => {\r\n      setAccount(account);\r\n    });\r\n\r\n    async function Network() {\r\n      const chainId = await getNetwork(provider).then((chainId) => {\r\n        setChainId(chainId);\r\n        return chainId;\r\n      });\r\n\r\n      if (chains.networks.includes(chainId)){\r\n        setwrongNetworkOpen(false);\r\n        console.log('chainID: ', chainId);\r\n        // Get the router using the chainID\r\n        const router = await getRouter (chains.routerAddress.get(chainId), signer)\r\n        setRouter(router);\r\n        // Get Weth address from router\r\n        await router.WETH().then((wethAddress) => {\r\n          setWeth(getWeth (wethAddress, signer));\r\n          // Set the value of the weth address in the default coins array\r\n          const coins = COINS.get(chainId);\r\n          coins[0].address = wethAddress;\r\n          setCoins(coins);\r\n        });\r\n        // Get the factory address from the router\r\n        await router.factory().then((factory_address) => {\r\n          setFactory(getFactory (factory_address, signer));\r\n        })\r\n      } else {\r\n        console.log('Wrong network mate.');\r\n        setwrongNetworkOpen(true);\r\n      }\r\n    }\r\n\r\n    Network()\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={coins}\r\n        signer={signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={coins}\r\n        signer={signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n        />\r\n\r\n      {/* Coin Swapper */}\r\n      <Container maxWidth=\"xs\">\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            Swap Coins\r\n          </Typography>\r\n\r\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={true}\r\n                value={field1Value}\r\n                onClick={() => setDialog1Open(true)}\r\n                onChange={handleChange.field1}\r\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <IconButton onClick={switchFields} className={classes.switchButton}>\r\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\r\n            </IconButton>\r\n\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={false}\r\n                value={field2Value}\r\n                onClick={() => setDialog2Open(true)}\r\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Balance Display */}\r\n            <Typography variant=\"h6\">Your Balances</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(coin1.balance, coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(coin2.balance, coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Reserves Display */}\r\n            <Typography variant=\"h6\">Reserves</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(reserves[0], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(reserves[1], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            <LoadingButton\r\n              loading={loading}\r\n              valid={isButtonEnabled()}\r\n              success={false}\r\n              fail={false}\r\n              onClick={swap}\r\n            >\r\n              <LoopIcon />\r\n              Swap\r\n            </LoadingButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n          Clearmatics Autonity Uniswap | Get AUT for use in the bakerloo testnet{\" \"}\r\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoinSwapper;\r\n"]},"metadata":{},"sourceType":"module"}